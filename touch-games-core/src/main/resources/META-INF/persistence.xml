<?xml version="1.0" encoding="UTF-8"?>
<persistence version="1.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd">
	
	<!-- Configuração do banco de dados -->
	
	<persistence-unit name="touch-games">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>

		<!--
		Se não usássemos hibernate.archive.autodetection (ver abaixo), deveriamos buscar aqui
		as nossas entidades uma a uma.
		-->
		<!--<class>br.com.touchtec.games.core.model.Desenvolvedora</class>-->

		<properties>
			<!--
			Aqui, vamos configurar um Postgres.
			Nossos clientes usam Postgres ou Oracle.
			-->
			<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="hibernate.connection.driver_class" value="org.postgresql.Driver"/>
			<property name="hibernate.connection.username" value="touch" />
			<property name="hibernate.connection.password" value="touch" />
			<property name="hibernate.connection.url" value="jdbc:postgresql://localhost/touch-games" />
			<!--<property name="hibernate.connection.username" value="postgres" />-->
			<!--<property name="hibernate.connection.password" value="postgres" />-->
			<!--<property name="hibernate.connection.url" value="jdbc:postgresql://timemachine.touchtec.com.br:13000/postgres" />-->

			<!--
			Nao costumamos deixar 'update' nas nossas aplicações de verdade; deixamos 'none' ou 'validade'.
			'update' cria as tabelas e colunas automaticamente a paritr das entidades.
			Nas nossas aplicações reais usamos uma ferramenta chamada 'liquibase'.
			-->
			<property name="hibernate.hbm2ddl.auto" value="update" />

			<!--
			Em DEV, muitas vezes é útil exibir o SQL que o Hibernate está gerando. Ajuda a depurar.
			Em Produção, nunca deixamos ligado. Polui os logs e deixa as coisas um pouco mais lentas.
			-->
			<property name="hibernate.show_sql" value="true" />

			<!--
			Diz ao Hibernate quantos níveis de relacionamentos ele deve carregar quando recuperamos
			uma entidade do banco. Na prática, está relacionado aos JOIN que ele terá que fazer entre
			as tabelas.
			Guardem essa regra: JOINs são lentos. Quanto menos, melhor.
			-->
			<property name="hibernate.max_fetch_depth" value="3" />

			<!--
			Pede que o Hibernate esacaneie as entidades do nosso projeto automaticamente;
			Nao usamos isto em aplicaçõe reais, pois temos entidades em vários modulos e não apenas
			na apllicação final.
			-->
			<property name="hibernate.archive.autodetection" value="class" />
		</properties>
	</persistence-unit>
</persistence>
